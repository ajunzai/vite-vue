// 台阶问题
function numWays(n) {
  if (n === 0) return 1
  const dp = [null, 1, 2]
  for (let i = 3; i <= n; i++) {
    dp[i] = dp[i - 1] + dp[i - 2]
  }
  return dp[n]
}

/**
 * 
给你 2 枚相同 的鸡蛋，和一栋从第 1 层到第 n 层共有 n 层楼的建筑。

已知存在楼层 f ，满足 0 <= f <= n ，任何从 高于 f 的楼层落下的鸡蛋都 会碎 ，从 f 楼层或比它低 的楼层落下的鸡蛋都 不会碎 。

每次操作，你可以取一枚 没有碎 的鸡蛋并把它从任一楼层 x 扔下（满足 1 <= x <= n）。如果鸡蛋碎了，你就不能再次使用它。如果某枚鸡蛋扔下后没有摔碎，则可以在之后的操作中 重复使用 这枚鸡蛋。

请你计算并返回要确定 f 确切的值 的 最小操作次数 是多少？
 */

/**
 * 
 = 0 即只剩一枚鸡蛋，此时我们需要从 1 层开始逐层验证才能确保获取确切的 f 值，因此对于任意的 j 都有 dp[0][j] = j
i = 1，对于任意 j ，第一次操作可以选择在 [1, j] 范围内的任一楼层 k，如果鸡蛋在 k 层丢下后破碎，
接下来问题转化成 i = 0 时验证 k - 1 层需要的次数，即 dp[0][k - 1], 总操作次数为 dp[0][k - 1] + 1； 

如果鸡蛋在 k 层丢下后没碎，接下来问题转化成 i = 1 时验证 j - k 层需要的次数， 即 dp[1][j - k], 
总操作次数为 dp[1][j - k] + 1，考虑最坏的情况，
两者取最大值则有 dp[1][j] = min(dp[1][j], max(dp[0][k - 1] + 1, dp[1][j - k] + 1))


 */
var twoEggDrop = function(n) {
  const dp = new Array(2).fill(0).map(() => {
      return new Array(n + 1).fill(Infinity)
  })

  for (let i = 1;i <= n; i++) {
      dp[0][i] = i
  }
  dp[1][0] =  0
  dp[1][1] = 1
  for (let j = 1;j <= n ;j++) {
      for (let k = 1; k<= j; k++) {
          dp[1][j] = Math.min(dp[1][j], Math.max((dp[0][k-1] + 1), (dp[1][j-k] + 1)))
      }
  }
  return dp[1][n]
};